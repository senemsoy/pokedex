{"version":3,"sources":["pokeball.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","startIndex","Math","floor","random","useState","pokemon","setPokemon","pokemonData","setPokemonData","getPokemon","a","pokeArray","api","axios","get","results","push","data","console","log","Header","className","src","logo","statConvert","stat","pokeTypeBackground","type","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","renderBackgroundColor","types","length","name","onSubmit","e","preventDefault","onChange","target","value","toLowerCase","placeholder","map","style","background","sprites","round","height","weight","typeObject","join","abilities","abilityObject","key","ability","width","stats","base_stat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9c91bb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.b9ea9d22.png\";","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport logo from './pokeball.png'; \n\nconst App = () => {\n    //current number of Pokemons in the API\n    const pokeCount = 893;\n    const startIndex = Math.floor(Math.random() * pokeCount) + 1;\n\n    const [pokemon, setPokemon] = useState(startIndex);\n    const [pokemonData, setPokemonData] = useState([]);\n\n    const getPokemon = async () => {\n      const pokeArray = [];\n      try {\n        const api = `https://pokeapi.co/api/v2/pokemon/${pokemon}` //gathering an individual pokemon we search for\n        const results = await axios.get(api)\n        pokeArray.push(results.data);\n        setPokemonData(pokeArray);\n        console.log(results)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n    const handleChange = (e) => {\n      setPokemon(e.target.value.toLowerCase())\n    }\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      getPokemon();\n    }\n\n    const Header = () => \n      <div className=\"header\">\n        <div className=\"header-background\">\n          <img src={logo} className=\"logo\"/>\n          <h1>Pokedex</h1>\n        </div>\n    </div>\n\n    const statConvert = (stat) => {\n        let convertedStat = stat*0.01\n        return `calc(65%*${convertedStat})`; \n    }\n\n    const pokeTypeBackground = (type) => {\n        const pokeType = {\n          normal: '#ffc1b0',\n          fighting: '#f23d65',\n          flying: '#0caaed',\n          poison: '#867bff',\n          ground: '#bb7171',\n          rock: '#cfcbf5',\n          bug: '#88db88',\n          ghost: '#dedede',\n          steel: '#76afb5',\n          fire: '#f06c6c',\n          water: '#72d6ce',\n          grass: '#a1d998',\n          electric: '#ffe585',\n          psychic: '#82acff',\n          ice: '#b0e7ff',\n          dragon: '#ffa258',\n          dark: '#b578d6',\n          fairy: '#bea7db',\n          unknown: '#2c8fa8',\n          shadow: '#515a73'\n        };\n        return pokeType[type];\n    }\n\n    let renderBackgroundColor = (data) => {\n            if (data.types.length === 1) {\n                return (\n                    pokeTypeBackground(data.types[0].type.name)\n                )\n            } else {\n                return (\n                    `linear-gradient(to right, ${pokeTypeBackground(data.types[0].type.name)}, ${pokeTypeBackground(data.types[1].type.name)})`\n                )\n            }\n        }\n\n    return (\n      <div className=\"App\">\n        <Header/>\n        <form onSubmit={handleSubmit}>\n          <label>\n            <input \n              type=\"text\" \n              onChange={handleChange} \n              placeholder=\"Search for a Pokemon!\"\n            />\n          </label>\n        </form>\n        {pokemonData.map((data) => {\n          return(\n            <div className=\"container \" style={{background: renderBackgroundColor(data)}}>\n            <div className=\"pokeName\">\n              <h1>{data.name}</h1>\n              <img src={data.sprites[\"front_default\"]} />\n            </div>\n            <div className=\"pokeTable\">\n              <div className=\"pokeTableBody\">\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Height</div>\n                  <div className=\"pokeTableCell\">\n                    {\" \"}\n                    {Math.round(data.height * 3.9)}\"\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Weight</div>\n                  <div className=\"pokeTableCell pokeWeight\">\n                    {\" \"}\n                    {Math.round(data.weight / 4.3)} lbs\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Type</div>\n                  <div className=\"pokeTableCell\">{data.types && data.types.map((typeObject) => \n                      typeObject.type.name).join(', ')}\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Abilities</div>\n                  <div className=\"pokeTableCell\">\n                  <ol>\n                    {data.abilities && data.abilities.map((abilityObject) => (\n                      <li key={abilityObject.ability.name}>{abilityObject.ability.name}</li>\n                    ))}\n                  </ol>\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Hp</div>\n                  <div className=\"pokeTableCell\">\n                    <div className=\"pokeStat-bar\" style={{width: statConvert(data.stats[5].base_stat), background: renderBackgroundColor(data)}}>\n                        {data.stats[5].base_stat}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Attack</div>\n                  <div className=\"pokeTableCell\">\n                    <div className=\"pokeStat-bar\" style={{width: statConvert(data.stats[4].base_stat), background: renderBackgroundColor(data)}}>\n                        {data.stats[4].base_stat}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Defense</div>\n                  <div className=\"pokeTableCell\">\n                    <div className=\"pokeStat-bar\" style={{width: statConvert(data.stats[3].base_stat), background: renderBackgroundColor(data)}}>\n                        {data.stats[3].base_stat}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Speed</div>\n                  <div className=\"pokeTableCell\">\n                    <div className=\"pokeStat-bar\" style={{width: statConvert(data.stats[0].base_stat), background: renderBackgroundColor(data)}}>\n                        {data.stats[0].base_stat}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Special Attack</div>\n                  <div className=\"pokeTableCell\">\n                    <div className=\"pokeStat-bar\" style={{width: statConvert(data.stats[2].base_stat), background: renderBackgroundColor(data)}} >\n                        {data.stats[2].base_stat}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"pokeTableRow\">\n                  <div className=\"pokeTableCell\">Special Defense</div>\n                  <div className=\"pokeTableCell\">\n                    <div className=\"pokeStat-bar\" style={{width: statConvert(data.stats[1].base_stat), background: renderBackgroundColor(data)}} >\n                        {data.stats[1].base_stat}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          )\n        })}\n      </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}